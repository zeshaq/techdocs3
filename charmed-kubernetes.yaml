

# when deploying through maas, br-ex creates problem. No need to use bridge. 



juju deploy -n 2 --channel 1.29/stable --constraints tags=vm kubernetes-control-plane
juju deploy -n 3 --channel 1.29/stable --constraints tags=vm kubernetes-worker
juju deploy -n 1 --channel 1.29/stable --constraints tags=vm  kubeapi-load-balancer
juju deploy -n 3 --channel 1.29/stable --constraints tags=vm etcd
juju deploy -n 1 --channel 1.29/stable --constraints tags=vm easyrsa




juju deploy  --channel 1.29/stable  calico
juju deploy  --channel 1.29/stable  containerd



juju expose   kubernetes-worker
juju expose    kubeapi-load-balancer
juju config calico ignore-loose-rpf=true


#juju config calico vxlan=Always

 
juju relate kubernetes-control-plane:loadbalancer-external kubeapi-load-balancer:lb-consumers
juju relate  kubernetes-control-plane:loadbalancer-internal kubeapi-load-balancer:lb-consumers
juju relate  kubernetes-control-plane:kube-control kubernetes-worker:kube-control
juju relate  kubernetes-control-plane:certificates easyrsa:client
juju relate  etcd:certificates easyrsa:client
juju relate  kubernetes-control-plane:etcd etcd:db
juju relate  kubernetes-worker:certificates easyrsa:client
juju relate  kubeapi-load-balancer:certificates easyrsa:client
juju relate  calico:etcd etcd:db
juju relate  calico:cni kubernetes-control-plane:cni
juju relate  calico:cni kubernetes-worker:cni
juju relate  containerd:containerd kubernetes-worker:container-runtime
juju relate  containerd:containerd kubernetes-control-plane:container-runtime




juju deploy -n 3 --channel reef/stable --config osconfig.yaml --constraints tags=ckosd ceph-osd
juju deploy -n 3   --channel reef/stable --config osconfig.yaml ceph-mon  --constraints tags=ckmon
juju integrate ceph-mon:osd ceph-osd:mon


juju config kubernetes-control-plane allow-privileged=true
juju deploy ceph-csi
juju integrate ceph-csi:kubernetes kubernetes-control-plane:juju-info
juju integrate ceph-csi:ceph-client ceph-mon:client



metallb 


juju config kubernetes-control-plane proxy-extra-config='{mode: ipvs, ipvs: {strictARP: true}}'
juju config kubernetes-worker proxy-extra-config='{mode: ipvs, ipvs: {strictARP: true}}'




juju ssh kubernetes-control-plane/leader -- cat config > ~/.kube/config

juju add-k8s cdk-cloud --controller $(juju switch | cut -d: -f1)

juju add-k8s cdk-cloud2 --controller $(juju switch | cut -d: -f1)

juju add-model metallb2 cdk-cloud2 
juju deploy metallb --config iprange='12.12.171.1-12.12.171.254' --trust












# get local interface name (this assumes a single default route is present)
export INTERFACE=$(ip route | grep default | cut -d ' ' -f 5)
echo $INTERFACE
export IP_ADDRESS=$(ip -4 addr show dev $INTERFACE | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
echo $IP_ADDRESS
sudo sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
sudo sysctl -p
sudo iptables -t nat -A POSTROUTING -o $INTERFACE -j SNAT --to $IP_ADDRESS
#TODO inbound port forwarding/load balancing
# Persist NAT configuration
echo iptables-persistent iptables-persistent/autosave_v4 boolean true | sudo debconf-set-selections
echo iptables-persistent iptables-persistent/autosave_v6 boolean true | sudo debconf-set-selections
sudo apt-get install iptables-persistent -y




kubectl create deployment hello-world --image=gcr.io/google-samples/node-hello:1.0
kubectl scale deployment hello-world --replicas=5
kubectl expose deployment hello-world --type=LoadBalancer --name=hello --port 8080